#!/bin/bash
# Creates configmap and secrets for Prereg Captcha
# Creates configmap and secrets for resident Captcha
## Usage: ./install.sh [kubeconfig]


if [ $# -ge 1 ] ; then
  export KUBECONFIG=$1
fi

NS=captcha

function create_namespace() {
    if kubectl get namespace $NS &> /dev/null; then
    echo "Namespace $NS exists."
    else
    echo "Namespace $NS does not exist. Creating namespace $NS"
    kubectl create namespace $NS
    fi    
}

function Prereg_Captcha() {
  echo Istio label
  kubectl label ns $NS istio-injection=enabled --overwrite

  PREREG_HOST=prereg.{{domain}}
  RESIDENT_HOST=resident.{{domain}}

  SITE_KEY={{pre_reg_captcha_site_key}}
  SECRET_KEY={{pre_reg_captcha_secret_key}}
  RSITE_KEY={{resident_captcha_site_key}}
  RSECRET_KEY={{resident_captcha_secret_key}}

  kubectl -n $NS delete --ignore-not-found=true secret mosip-captcha
  kubectl -n $NS create secret generic mosip-captcha --from-literal=prereg-captcha-site-key=$SITE_KEY --from-literal=prereg-captcha-secret-key=$SECRET_KEY --from-literal=resident-captcha-site-key=$RSITE_KEY --from-literal=resident-captcha-secret-key=$RSECRET_KEY --dry-run=client -o yaml | kubectl apply -f -
  
  return 0
}

# set commands for error handling.
set -e
set -o errexit   ## set -e : exit the script if any statement returns a non-true return value
set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable
set -o errtrace  # trace ERR through 'time command' and other functions
set -o pipefail  # trace ERR through pipes

echo Create $NS namespace
create_namespace
Prereg_Captcha   # calling function