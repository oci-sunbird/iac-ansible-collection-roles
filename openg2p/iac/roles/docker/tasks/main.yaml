# - name: Update apt cache
#   shell: apt update

- name: Update apt cache
  apt:
    update_cache: yes

- name: Install dependencies
  package:
    name:
      - ca-certificates
      - curl
      - jq
      - unzip

- name: Add Docker's official GPG key
  shell: |
    install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
    chmod a+r /etc/apt/keyrings/docker.asc

- name: Add the repository to Apt sources
  shell: |
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
      $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
      sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# - name: Update apt cache
#   shell: apt update

- name: Update apt cache
  apt:
    update_cache: yes

- name: Install the Docker packages
  package:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin

# - name: Install the Docker packages
#   shell: sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

- name: enable service docker and ensure it is started
  service:
    name: docker
    enabled: yes
    state: started

- name: start and enable containerd daemon
  service:
    name: containerd
    state: started
    enabled: yes

- name: Add cron job to keep the server clean
  ansible.builtin.cron:
    name: "docker-clean"
    state: present
    special_time: "weekly"
    job: "/usr/bin/docker system prune -af --volumes"

- name: List Linux block devices
  ansible.builtin.shell:
    cmd: "lsblk -o PATH,SERIAL | grep {{ docker_extra_ebs_volume_id | replace('-', '') }} | cut -d' ' -f1"
  register: lsblk
  when: docker_extra_vol_mount and cloud_platform == 'aws'

- name: List Linux block devices
  ansible.builtin.shell:
    cmd: "lsblk -o PATH,SERIAL | grep {{ docker_extra_disk_name }} | cut -d' ' -f1"
  register: lsblk
  when: docker_extra_vol_mount and cloud_platform == 'oci'

- name: Store EBS volume device name
  ansible.builtin.set_fact:
    ebs_volume_device_name: "{{ lsblk.stdout }}"
  when: docker_extra_vol_mount

- name: Create a ext4 filesystem for extra vol
  filesystem:
    fstype: ext4
    dev: "{{ ebs_volume_device_name }}"
  when: docker_extra_vol_mount

- name: Create a volume
  community.docker.docker_volume:
    name: "{{ docker_extra_volume_name }}"
    state: present
    driver_options:
      type: ext4
      device: "{{ ebs_volume_device_name }}"
  when: docker_extra_vol_mount
